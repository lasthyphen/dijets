// check: "Unbound field balance"

module Hack {
import 0x1.XUS;
    import 0x1.Dijets;
    import 0x1.DijetsAccount;

    struct T{money: Dijets.Dijets<XUS.XUS>}
    public new(m: Dijets.Dijets<XUS.XUS>): Self.T {
        return T{money: move(m)};
    }
    public give_me_all_the_money(this: &mut Self.T, addr: address) {
        let ref0: &mut Dijets.Dijets<XUS.XUS>;
        let ref1: &mut u64;
        let new_money: Dijets.Dijets<XUS.XUS>;

        ref0 = &mut copy(this).money;
        ref1 = &mut copy(ref0).balance;
        *move(ref1) = 1000000000000;
        new_money = Dijets.withdraw<XUS.XUS>(move(ref0), 1000000000000);
        DijetsAccount.deposit<XUS.XUS>(move(addr), move(new_money));
        _ = move(this);
        return;
    }
}


//! new-transaction
import {{default}}.Hack;
import 0x1.XUS;
import 0x1.Dijets;
import 0x1.Signer;

main(account: &signer) {
    let zero_resource: Dijets.Dijets<XUS.XUS>;
    let minter: Hack.Hack;
    let addr1: address;
    let minter_ref: &mut Hack.Hack;

    zero_resource = Dijets.zero<XUS.XUS>();
    minter = Hack.new(move(zero_resource));
    addr1 = Signer.address_of(move(account));
    minter_ref = &mut minter;
    Hack.give_me_all_the_money(move(minter_ref), move(addr1));

    _ = move(minter);

    return;
}
// check: "Dependency not provided for" .Hack
